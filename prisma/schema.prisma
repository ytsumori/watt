generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_POSTGRES_URL")
  directUrl = env("SUPABASE_DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  phoneNumber    String?         @unique
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  accounts       Account[]
  orders         Order[]
  sessions       Session[]
  stripeCustomer StripeCustomer?
}

model OneTimePassword {
  id          String @id @default(cuid())
  phoneNumber String @unique
  code        String @db.VarChar(6)
}

model StripeCustomer {
  id               String   @id @default(cuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Restaurant {
  id                 String                           @id @default(cuid())
  name               String
  isOpen             Boolean                          @default(false)
  isPublished        Boolean                          @default(false)
  googleMapPlaceId   String                           @unique
  password           String                           @unique @default(uuid())
  smokingOption      SmokingOption?
  phoneNumber        String?
  interiorImagePath  String?
  createdAt          DateTime                         @default(now())
  updatedAt          DateTime                         @default(now()) @updatedAt
  meals              Meal[]
  orders             Order[]
  bankAccount        RestaurantBankAccount?
  closedAlerts       RestaurantClosedAlert[]
  openingHours       RestaurantGoogleMapOpeningHour[]
  googleMapPlaceInfo RestaurantGoogleMapPlaceInfo?
  menuImages         RestaurantMenuImage[]
  paymentOptions     RestaurantPaymentOption[]
  coordinate         RestaurantCoordinate?
  staffs             Staff[]
}

model RestaurantPaymentOption {
  id           String        @id @default(cuid())
  restaurantId String
  option       PaymentOption
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, option])
}

model RestaurantMenuImage {
  id           String     @id @default(cuid())
  restaurantId String
  imagePath    String
  menuNumber   Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model RestaurantGoogleMapPlaceInfo {
  id           String     @id @default(cuid())
  restaurantId String     @unique
  latitude     Float
  longitude    Float
  url          String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model RestaurantCoordinate {
  id           String                                 @id @default(cuid())
  restaurantId String                                 @unique
  point        Unsupported("geography(Point, 4326)")?
  createdAt    DateTime                               @default(now())
  updatedAt    DateTime                               @default(now())
  Restaurant   Restaurant                             @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model RestaurantGoogleMapOpeningHour {
  id                     String     @id @default(cuid())
  restaurantId           String
  openHour               Int
  openMinute             Int
  openDayOfWeek          DayOfWeek
  closeHour              Int
  closeMinute            Int
  closeDayOfWeek         DayOfWeek
  isAutomaticallyApplied Boolean    @default(true)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @default(now()) @updatedAt
  restaurant             Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model RestaurantClosedAlert {
  id           String     @id @default(cuid())
  restaurantId String
  closedAt     DateTime   @default(now())
  notifiedAt   DateTime?
  openAt       DateTime?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Meal {
  id           String      @id @default(cuid())
  restaurantId String
  imagePath    String
  price        Int
  title        String
  description  String
  isInactive   Boolean     @default(false)
  outdatedAt   DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  items        MealItem[]
  orders       OrderMeal[]
}

model MealItem {
  id          String           @id @default(cuid())
  mealId      String
  price       Int
  title       String
  description String?
  position    Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  meal        Meal             @relation(fields: [mealId], references: [id], onDelete: Cascade)
  options     MealItemOption[]

  @@unique([mealId, position])
}

model MealItemOption {
  id         String            @id @default(cuid())
  mealItemId String
  title      String
  extraPrice Int
  position   Int
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now()) @updatedAt
  mealItem   MealItem          @relation(fields: [mealItemId], references: [id], onDelete: Cascade)
  orders     OrderMealOption[]

  @@unique([mealItemId, position])
}

model Order {
  id                     String                      @id @default(cuid())
  orderNumber            Int                         @unique @default(autoincrement())
  userId                 String
  restaurantId           String
  peopleCount            Int
  orderTotalPrice        Int
  completedAt            DateTime?
  canceledAt             DateTime?
  approvedByRestaurantAt DateTime?
  createdAt              DateTime                    @default(now())
  updatedAt              DateTime                    @default(now()) @updatedAt
  restaurant             Restaurant                  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user                   User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  automaticCancellation  OrderAutomaticCancellation?
  cancellation           OrderCancellation?
  meals                  OrderMeal[]
  notificationCall       OrderNotificationCall?
  payment                Payment?
}

model OrderMeal {
  id        String            @id @default(cuid())
  orderId   String
  mealId    String
  quantity  Int? // @deprecated
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  order     Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  meal      Meal              @relation(fields: [mealId], references: [id], onDelete: Cascade)
  options   OrderMealOption[]
}

model OrderMealOption {
  id               String         @id @default(cuid())
  orderMealId      String
  mealItemOptionId String
  createdAt        DateTime       @default(now())
  orderMeal        OrderMeal      @relation(fields: [orderMealId], references: [id], onDelete: Cascade)
  mealItemOption   MealItemOption @relation(fields: [mealItemOptionId], references: [id], onDelete: Cascade)
}

model OrderNotificationCall {
  id        String                      @id @default(cuid())
  orderId   String                      @unique
  callId    String
  status    OrderNotificationCallStatus
  createdAt DateTime                    @default(now())
  order     Order                       @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderCancellation {
  id          String               @id @default(cuid())
  orderId     String               @unique
  reason      CancellationReason
  cancelledBy CancellationUserType
  cancelledAt DateTime             @default(now())
  order       Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderAutomaticCancellation {
  id                String   @id @default(cuid())
  orderId           String   @unique
  googleCloudTaskId String
  createdAt         DateTime @default(now())
  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Payment {
  id                    String    @id @default(cuid())
  orderId               String    @unique
  stripePaymentId       String
  additionalAmount      Int
  totalAmount           Int
  restaurantProfitPrice Int
  isCsvDownloaded       Boolean   @default(false)
  completedAt           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
  order                 Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Staff {
  id           String     @id @default(cuid())
  restaurantId String
  lineId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, lineId])
}

model RestaurantBankAccount {
  id               String          @id @default(cuid())
  restaurantId     String          @unique
  bankCode         String          @db.VarChar(4)
  branchCode       String          @db.VarChar(3)
  accountType      BankAccountType
  accountNo        String
  holderName       String
  isAdminConfirmed Boolean         @default(false)
  clientCode       Int             @unique @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  restaurant       Restaurant      @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([bankCode, branchCode, accountType, accountNo])
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum BankAccountType {
  SAVINGS
  CHECKING
  DEPOSIT
}

enum CancellationUserType {
  USER
  STAFF
}

enum CancellationReason {
  FULL
  USER_DEMAND
  CLOSED
  LATE
  CALL_NO_ANSWER
  NO_ACTION_AFTER_CALL
}

enum PaymentOption {
  CASH
  CREDIT_CARD
  E_MONEY
  QR_CODE
}

enum SmokingOption {
  SMOKING
  NON_SMOKING
  SEPARATED
  SEPARATED_ONLY_E_CIGARETTE
}

enum OrderNotificationCallStatus {
  IN_PROGRESS
  ANSWERED
  NO_ANSWER
}
