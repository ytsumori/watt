generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_POSTGRES_URL")
  directUrl = env("SUPABASE_DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  accounts       Account[]
  paypayCustomer PaypayCustomer?
  sessions       Session[]
  stripeCustomer StripeCustomer?
  orders         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StripeCustomer {
  id               String   @id @default(cuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaypayCustomer {
  id                        String   @id @default(cuid())
  userId                    String   @unique
  paypayUserAuthorizationId String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Restaurant {
  id               String   @id @default(cuid())
  name             String
  isOpen           Boolean  @default(false)
  googleMapPlaceId String   @unique
  password         String   @unique @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  bankAccount RestaurantBankAccount?
  meals       Meal[]
  openHours   RestaurantOpenHour[]
  staffs      Staff[]
}

model Meal {
  id           String   @id @default(cuid())
  restaurantId String
  imageUrl     String
  price        Int
  title        String
  description  String?
  isDiscarded  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  orders Order[]

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Order {
  id                String          @id @default(cuid())
  userId            String
  mealId            String
  paymentProvider   PaymentProvider
  providerPaymentId String
  status            OrderStatus     @default(PREAUTHORIZED)
  price             Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)

  @@unique([paymentProvider, providerPaymentId])
}

model RestaurantOpenHour {
  id           String    @id @default(cuid())
  day          DayOfWeek
  endHour      Int
  endMinute    Int
  restaurantId String
  startHour    Int
  startMinute  Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Staff {
  id           String   @id @default(cuid())
  restaurantId String
  lineId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, lineId])
}

model RestaurantBankAccount {
  id           String          @id @default(cuid())
  restaurantId String          @unique
  bankCode     String          @db.VarChar(4)
  branchCode   String          @db.VarChar(3)
  accountType  BankAccountType
  accountNo    String
  holderName   String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([bankCode, branchCode, accountType, accountNo])
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum BankAccountType {
  SAVINGS
  CHECKING
  DEPOSIT
}

enum PaymentProvider {
  STRIPE
  PAYPAY
}

enum OrderStatus {
  PREAUTHORIZED
  COMPLETE
  CANCELLED
}
